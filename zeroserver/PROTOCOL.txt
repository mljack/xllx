
/* 消息类型定义 */
typedef enum
{
	MGS_UNKNOWN,		/* 未知 */
	MGS_LIST,		/* 获取插件列表 */
	MGS_SEARCH,		/* 关键字查询 */
	MGS_DOWNLOAD,		/* 请求下载 */
	MGS_PLUGIN_INFO,	/* 返回插件信息 */
	MGS_SEARCH_INFO,	/* 返回查询结果 */
	MGS_MOVIEDB_INFO,	/* 返回影片信息 */
	MGS_DOWNLOAD_INFO,      /* 返回下载结果 */
} HeaderId;

struct _Header
{
	HeaderId id;          /* 消息体类型 */
};

typedef struct _Header Header;

/* 请求获取插件列表消息 */
typedef enum
{
	PLUGIN_TYPE_LYRIC,         /* 歌词 */
	PLUGIN_TYPE_SUBTITLE,      /* 字幕 */
	PLUGIN_TYPE_MOVIEDB,       /* 影片 */
} PluginType;

struct _ListPluginRequ
{
	PluginType type;		/* 插件类型 */
	char       language[20];	/* 只请求特定语言描述 */
};

typedef struct _ListPluginRequ ListPluginRequ;

struct _ListPluginRequMsg
{
	Header head;
	ListPluginRequ body;
};

/* 请求查询插件消息定义 */
struct _SearchRequ
{
	PluginType type;	/* 插件类型 */
	char      pid[256];	/*插件id */
	char      title[256];	/* 关键字 */
	char      artist[256];	/* 搜索歌词时为艺人,其它情况下忽略 */
};

typedef struct _SearchRequ SearchRequ;

struct _SearchRequMsg
{
	Header head;
	SearchRequ body;
};

/* 请求下载查询结果消息定义 */
struct _DownloadRequ
{
	char      pid[256];     /*插件id */
	char      info[256];	/* 回传给插件的信息 */
	/* TODO: 是否发送一个目录路径给插件，让其将数据保存在里面？如果C/S位于不同主机，则功能失效 */
};

typedef struct _DownloadRequ DownloadRequ;

struct _DownloadRequMsg
{
	Header head;
	DownloadRequ body;
};

/* 返回插件列表消息定义 */
struct _PluginInfo
{
	char	pid[256];
	char	name[256];
	char	version[16];
	char	author[16];
	char	email[16];
	char    platform[16];
	char    icon[16];
	char    description[512];
	/* FIXME: 插件的icon.png 目前看起来似乎没什么用处 */
};

typedef struct _PluginInfo PluginInfo;

struct _PluginResp
{
	PluginType type;	/* 插件类型 */
	int	count;
};

typedef struct _PluginResp PluginResp;
/*
 * 消息包格式：
 * |PluginResp|PluginInfo|PluginInfo|...| PluginInfo数量在PluginResp的count中指定
 */

struct _PluginRespMsg
{
	Header head;
	PluginResp body;
};

/* 返回查询结果消息定义 */
struct _ResultInfo
{
	char    title[256];
	char    artist[256];
};

typedef struct _ResultInfo ResultInfo;

struct _SearchResp
{
	char    pid[256];     /*插件id */
	int	count;
};

typedef struct _SearchResp SearchResp;

/*
 * 消息包格式：
 * |SearchResp|ResultInfo|ResultInfo|...| ResultInfo数量在SearchResp的count中指定
 */

struct _SearchRespMsg
{
	Header head;
	SearchResp body;
};

/* 返回影片查询结果消息定义 */
struct _MoviedbResp
{
	char    title[256];
	char    artist[256];
};

typedef struct _MoviedbResp MoviedbResp;

struct _MoviedbRespMsg
{
	Header head;
	MoviedbResp body;
};

/* 返回下载结果消息定义 */
struct _DownloadResp
{
	char    path[256];
};

typedef struct _DownloadResp DownloadResp;

struct _DownloadRespMsg
{
	Header head;
	DownloadResp body;
};

typedef struct _ListPluginRequMsg	ListPluginRequMsg;
typedef struct _SearchRequMsg	SearchRequMsg;
typedef struct _DownloadRequMsg	DownloadRequMsg;

typedef struct _PluginRespMsg	PluginRespMsg;
typedef struct _SearchRespMsg	SearchRespMsg;
typedef struct _MoviedbRespMsg	MoviedbRespMsg;
typedef struct _DownloadRespMsg	DownloadRespMsg;

/*
 * 消息包格式：
 *
 * 请求信息包：
 * |ListPluginRequMsg|
 * |SearchRequMsg|
 * |DownloadRequMsg|
 *
 * 应答消息包：
 * |PluginRespMsg|PluginInfo|PluginInfo|...| PluginInfo数量在PluginResp的count中指定
 * |SearchRespMsg|ResultInfo|ResultInfo|...| count个ResultInfo包。
 * |MoviedbRespMsg|
 * |DownloadRespMsg|
 *
 * 传输过程：
 *
 * 查询插件信息：
 * [CLIENT]                      [SERVER]
 * 1.         ListPluginRequMsg  ->
 * 2.     <-  PluginRespMsg
 *
 * 查询关键字：
 * [CLIENT]                      [SERVER]
 * 1.          SearchRequMsg    ->
 * 2.       <- SearchRespMsg 
 * 或
 * 2.       <- MoviedbRespMsg
 *
 * 下载查询结果:
 * [CLIENT]                      [SERVER]
 * 1.         DownloadRequMsg ->
 * 2.      <- DownloadRespMsg 
 * */
